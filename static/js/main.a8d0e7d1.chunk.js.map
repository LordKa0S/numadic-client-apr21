{"version":3,"sources":["components/home/home.tsx","conf/server.ts","components/place-interactions/place-interactions.tsx","components/vehicle-activity/vehicle-activity.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","className","to","address","PlaceInteractions","useState","setGridApi","rowData","setRowData","Date","startDate","setStartDate","endDate","setEndDate","getDateChangeHandler","dateSetter","date","utils","DateFnsUtils","disableToolbar","variant","format","margin","label","value","onChange","KeyboardButtonProps","id","Button","color","onClick","url","URL","params","start_tis","toISOString","end_tis","search","URLSearchParams","toString","a","fetch","href","response","json","data","fetchData","style","width","height","onGridReady","api","sizeColumnsToFit","headerName","field","valueFormatter","toLocaleString","matchArray","match","groups","latitude","longitude","MapChildren","props","map","useMap","lineRef","createRef","useEffect","Object","keys","current","_bounds","length","flyToBounds","path","TileLayer","attribution","start","Marker","position","end","Polyline","ref","positions","VehicleActivity","license","setLicense","setPath","TextField","event","target","geom","item","ewkt","parseFloat","filter","MapContainer","center","zoom","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.a8d0e7d1.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\n\nimport './home.css';\n\nconst Home = (): JSX.Element => {\n    return (\n        <div className=\"centered\">\n            <Link to=\"/place-interactions\"><h1>Place Interactions</h1></Link>\n            <Link to=\"/vehicle-activity\"><h1>Vehicle Activity</h1></Link>\n        </div>\n    );\n}\n\nexport default Home;","export const address = 'http://localhost:3000/';","import { Dispatch, SetStateAction, useState } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\nimport { GridApi, GridReadyEvent, ValueFormatterParams } from 'ag-grid-community';\nimport { address } from '../../conf/server';\nimport { Button } from '@material-ui/core';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport './place-interactions.css';\n\nconst PlaceInteractions = (): JSX.Element => {\n    const [, setGridApi] = useState(null as unknown as GridApi);\n    const [rowData, setRowData] = useState([]);\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n\n    const onGridReady = (params: GridReadyEvent) => {\n        setGridApi(params.api);\n        params.api.sizeColumnsToFit();\n    };\n\n    const getDateChangeHandler = (dateSetter: Dispatch<SetStateAction<Date>>) => {\n        return (date: MaterialUiPickersDate) => {\n            if (date) {\n                dateSetter(date);\n            }\n        }\n    }\n\n    const onSearchClick = () => {\n        const url = new URL('/place_interactions', address);\n        const params = {\n            start_tis: startDate.toISOString(),\n            end_tis: endDate.toISOString(),\n        };\n        url.search = new URLSearchParams(params).toString();\n        const fetchData = async (url: URL) => {\n            const response = await fetch(url.href);\n            const data = await response.json();\n            setRowData(data);\n        };\n        fetchData(url);\n    }\n\n    const timestampFormatter = (params: ValueFormatterParams) => {\n        const { value } = params;\n        return value ? new Date(value).toLocaleString() : '';\n    }\n\n    const locationFormatter = (params: ValueFormatterParams) => {\n        const { value } = params;\n        const empty = '';\n        if (!value || typeof value !== 'string') {\n            return empty;\n        }\n        const matchArray = value.match(/SRID=4326;POINT\\((?<longitude>.*) (?<latitude>.*)\\)/);\n        if (!matchArray?.groups) {\n            return empty;\n        }\n        return `${matchArray.groups.latitude} ${matchArray.groups.longitude}`;\n\n    }\n\n    return (\n        <div className=\"place-interactions\">\n            <h1>Place Interactions</h1>\n            <div className=\"inputs\">\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        label=\"Start Date\"\n                        value={startDate}\n                        onChange={getDateChangeHandler(setStartDate)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"End Date\"\n                        value={endDate}\n                        onChange={getDateChangeHandler(setEndDate)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n                <Button variant=\"contained\" color=\"primary\" onClick={onSearchClick}>\n                    Search\n                </Button>\n            </div>\n            <div className=\"ag-theme-alpine grid-container\" style={{ width: '100%', height: '100%' }}>\n                <AgGridReact\n                    rowData={rowData}\n                    onGridReady={onGridReady}>\n                    <AgGridColumn headerName=\"License no.\" field=\"license\" />\n                    <AgGridColumn headerName=\"Time\" field=\"ts\" valueFormatter={timestampFormatter} />\n                    <AgGridColumn headerName=\"Coordinates\" field=\"ewkt\" valueFormatter={locationFormatter} />\n                </AgGridReact>\n            </div>\n        </div>\n    );\n};\n\nexport default PlaceInteractions;","import DateFnsUtils from \"@date-io/date-fns\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\nimport { ChangeEvent, createRef, Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { MapContainer, Marker, Polyline, TileLayer, useMap } from \"react-leaflet\";\nimport { address } from \"../../conf/server\";\nimport { LatLngTuple } from \"leaflet\";\n\nimport './vehicle-activity.css';\n\nconst MapChildren = (props: { path: LatLngTuple[] }) => {\n    const map = useMap();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const lineRef = createRef<any>();\n    useEffect(() => {\n        if (Object.keys(lineRef.current?._bounds).length > 0) {\n            map.flyToBounds(lineRef.current._bounds);\n        }\n    }, [lineRef, map, props.path]);\n    return (\n        <>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n                (() => {\n                    if (props.path.length > 0) {\n                        const [start] = props.path;\n                        return <Marker position={start}>\n                        </Marker>;\n                    }\n                })()\n            }\n            {\n                (() => {\n                    if (props.path.length > 1) {\n                        const end = props.path[props.path.length - 1];\n                        return <Marker position={end}>\n                        </Marker>;\n                    }\n                })()\n            }\n            <Polyline ref={lineRef} positions={props.path} />\n        </>\n    );\n}\n\nconst VehicleActivity = (): JSX.Element => {\n    const [license, setLicense] = useState('');\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n    const [path, setPath] = useState([] as LatLngTuple[]);\n\n    const getDateChangeHandler = (dateSetter: Dispatch<SetStateAction<Date>>) => {\n        return (date: MaterialUiPickersDate) => {\n            if (date) {\n                dateSetter(date);\n            }\n        }\n    }\n\n    const handleLicenseChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { value } = event.target;\n        setLicense(value);\n    }\n\n    const onSearchClick = () => {\n        const url = new URL('/vehicle_activity', address);\n        const params = {\n            license,\n            start_tis: startDate.toISOString(),\n            end_tis: endDate.toISOString(),\n        };\n        url.search = new URLSearchParams(params).toString();\n        type VehicleActivityData = {\n            ewkt: string,\n            ts: string,\n        }\n        const fetchData = async (url: URL) => {\n            const response = await fetch(url.href);\n            const data: VehicleActivityData[] = await response.json();\n            const geom = data.map((item) => {\n                const matchArray = item.ewkt.match(/SRID=4326;POINT\\((?<longitude>.*) (?<latitude>.*)\\)/);\n                if (!matchArray?.groups) {\n                    return null;\n                }\n                return [parseFloat(matchArray.groups.latitude), parseFloat(matchArray.groups.longitude)] as LatLngTuple;\n            }).filter(item => item !== null) as LatLngTuple[];\n            setPath(geom);\n        };\n        fetchData(url);\n    }\n\n    return (\n        <div className=\"vehicle-activity\">\n            <h1>Vehicle Activity</h1>\n            <div className=\"inputs\">\n                <TextField label=\"License No.\" value={license} onChange={handleLicenseChange} />\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        label=\"Start Date\"\n                        value={startDate}\n                        onChange={getDateChangeHandler(setStartDate)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"End Date\"\n                        value={endDate}\n                        onChange={getDateChangeHandler(setEndDate)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n                <Button variant=\"contained\" color=\"primary\" onClick={onSearchClick}>\n                    Search\n                </Button>\n            </div>\n            <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: '100%' }}>\n                <MapChildren path={path}></MapChildren>\n            </MapContainer>\n        </div>\n    );\n}\n\nexport default VehicleActivity;","import { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Home from './components/home/home';\nimport PlaceInteractions from './components/place-interactions/place-interactions';\nimport VehicleActivity from './components/vehicle-activity/vehicle-activity';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/place-interactions\">\n            <PlaceInteractions />\n          </Route>\n          <Route path=\"/vehicle-activity\">\n            <VehicleActivity />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}